@page "/chat"
@page "/chat/{conversationId:int?}"
@using Microsoft.EntityFrameworkCore
@using Agent007.Models.Chat
@using Agent007.Data
@using Agent007.Components
@using Agent007.LLM
@using Agent007.Tools
@inject IServiceProvider ServiceProvider
@inject ChatDbContext DbContext
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation
@inject LLMBackendFactory BackendFactory

<PageTitle>Agent Chat</PageTitle>

<div class="chat-container d-flex flex-column vh-100">
    <!-- Chat Header -->
    <div class="chat-header bg-dark text-white p-3 border-bottom">
        <div class="d-flex justify-content-between align-items-center">
            <div>
                <h4 class="mb-0">
                    @if (currentConversation?.Title != null)
                    {
                        @currentConversation.Title
                    }
                    else
                    {
                        <span class="text-muted">New Conversation</span>
                    }
                </h4>
                @if (currentConversation != null)
                {
                    <small class="text-muted">Started @currentConversation.CreatedAt.ToString("MMM d, yyyy 'at' h:mm tt")</small>
                }
            </div>
            <div>
                <button type="button" class="btn btn-outline-light btn-sm me-2" @onclick="StartNewConversation">
                    <i class="fas fa-plus"></i> New Chat
                </button>
                <button type="button" class="btn btn-outline-light btn-sm" @onclick="ShowConversationList">
                    <i class="fas fa-history"></i> History
                </button>
            </div>
        </div>
    </div>

    <!-- Messages Area -->
    <div class="messages-container flex-grow-1 overflow-auto p-3" id="messagesContainer">
        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert alert-danger" role="alert">
                <i class="fas fa-exclamation-triangle"></i> @errorMessage
                <button type="button" class="btn-close" @onclick="() => errorMessage = string.Empty"></button>
            </div>
        }

        @if (currentConversation?.Messages?.Any() == true)
        {
            <div class="messages-list">
                @foreach (var message in GetRootMessages())
                {
                    <ChatMessage Message="message"
                                 IsGenerating="@(message.Status == "generating")"
                                 ShowChildren="true"
                                 NestingDepth="0"
                                 OnRegenerateRequested="HandleRegenerateRequest"
                                 OnMessageChanged="HandleMessageChanged" />
                }
            </div>
        }
        else
        {
            <div class="empty-chat text-center text-muted py-5">
                <i class="fas fa-comments fa-3x mb-3 opacity-50"></i>
                <h5>Start a conversation</h5>
                <p>Ask a question or give an instruction to get started.</p>
            </div>
        }
    </div>

    <!-- Input Area -->
    <div class="chat-input bg-light border-top p-3">
        <div class="input-group">
            <textarea class="form-control auto-resize"
                      placeholder="Type your message..."
                      @bind="currentMessage"
                      @onkeypress="HandleKeyPress"
                      @oninput="HandleInput"
                      rows="1"
                      style="resize: none; overflow-y: auto; max-height: 50vh;"
                      disabled="@isProcessing"
                      id="messageInput"></textarea>
            <button class="btn btn-primary"
                    type="button"
                    @onclick="SendMessage"
                    disabled="@(isProcessing || string.IsNullOrWhiteSpace(currentMessage))">
                @if (isProcessing)
                {
                    <i class="fas fa-spinner fa-spin"></i>
                }
                else
                {
                    <i class="fas fa-paper-plane"></i>
                }
            </button>
        </div>
        <div class="form-text mt-2">
            Press <kbd>Enter</kbd> to send • <kbd>Shift + Enter</kbd> for new line
        </div>
    </div>
</div>

<style>
    .chat-container {
        height: 100vh;
        max-height: 100vh;
    }

    .messages-container {
        background-color: #f8f9fa;
        display: flex;
        flex-direction: column;
        width: 100%;
        overflow-x: hidden; /* Prevent horizontal scroll */
        overflow-y: auto; /* Allow vertical scroll */
    }

        .messages-container::-webkit-scrollbar {
            width: 6px;
        }

        .messages-container::-webkit-scrollbar-track {
            background: #f1f1f1;
        }

        .messages-container::-webkit-scrollbar-thumb {
            background: #c1c1c1;
            border-radius: 3px;
        }

            .messages-container::-webkit-scrollbar-thumb:hover {
                background: #a8a8a8;
            }

    .messages-list {
        display: flex;
        flex-direction: column;
        width: 100%;
        gap: 0.5rem;
        /* Ensure messages container takes full width available */
        min-width: 0;
    }

    .chat-input textarea {
        border: 2px solid #dee2e6;
        transition: border-color 0.15s ease-in-out;
    }

        .chat-input textarea:focus {
            border-color: #0d6efd;
            box-shadow: 0 0 0 0.2rem rgba(13, 110, 253, 0.25);
        }

    .empty-chat {
        height: 100%;
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
    }

    kbd {
        background-color: #6c757d;
        color: white;
        padding: 0.2rem 0.4rem;
        border-radius: 0.25rem;
        font-size: 0.875em;
    }
</style>

@code {
    [Parameter] public int? ConversationId { get; set; }

    // Root agent configuration - hardcoded for now
    private const string ROOT_AGENT_MODEL = "qwen3:4b";
    private const string ROOT_AGENT_SYSTEM_MESSAGE = @"You are a helpful assistant that helps the user with routing questions to the correct expert and you try to verify answers by consulting one other expert. You MUST provide all the details needed to the expert in the prompt. The expert does not have access to your context. You should utilize tools multiple times if neccesary or helpful.";

    private Agent? rootAgent;
    private Conversation? currentConversation;
    private string currentMessage = string.Empty;
    private bool isProcessing = false;
    private string errorMessage = string.Empty;
    private CancellationTokenSource? currentGenerationCancellation;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Initialize the root agent
            var backend = BackendFactory.CreateBackend(ROOT_AGENT_MODEL, ROOT_AGENT_SYSTEM_MESSAGE);
            rootAgent = new Agent(backend);
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to initialize AI agent: {ex.Message}";
        }

        if (ConversationId.HasValue)
        {
            await LoadConversation(ConversationId.Value);
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        // Handle navigation parameter changes
        if (ConversationId.HasValue && (currentConversation == null || currentConversation.Id != ConversationId.Value))
        {
            await LoadConversation(ConversationId.Value);
        }
        else if (!ConversationId.HasValue && currentConversation != null)
        {
            // Navigated to new chat
            currentConversation = null;
            StateHasChanged();
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await ScrollToBottom();
            await FocusInput();
        }

        // Auto-scroll to bottom after render (for new messages)
        await ScrollToBottom();
    }

    private async Task LoadConversation(int conversationId)
    {
        try
        {
            currentConversation = await DbContext.Conversations
                .Include(c => c.Messages.OrderBy(m => m.CreatedAt))
                .ThenInclude(m => m.Children)
                .FirstOrDefaultAsync(c => c.Id == conversationId);

            if (currentConversation == null)
            {
                // Conversation not found, redirect to new chat
                Navigation.NavigateTo("/chat");
                return;
            }

            StateHasChanged();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading conversation: {ex.Message}";
            StateHasChanged();
        }
    }

    private async Task StartNewConversation()
    {
        // Cancel any ongoing generation
        currentGenerationCancellation?.Cancel();
        currentGenerationCancellation = null;

        Navigation.NavigateTo("/chat");
        await FocusInput();
    }

    private async Task ShowConversationList()
    {
        if (JSRuntime is IJSInProcessRuntime)
            await JSRuntime.InvokeVoidAsync("alert", "Conversation history feature coming soon!");
    }

    private async Task SendMessage()
    {
        if (string.IsNullOrWhiteSpace(currentMessage) || isProcessing || rootAgent == null)
            return;

        try
        {
            isProcessing = true;
            var messageText = currentMessage.Trim();
            currentMessage = string.Empty;
            StateHasChanged(); // Clear input immediately

            bool isNewConversation = false;

            // Create conversation if it doesn't exist
            if (currentConversation == null)
            {
                currentConversation = new Conversation
                {
                    Title = GenerateConversationTitle(messageText),
                    CreatedAt = DateTime.UtcNow
                };
                DbContext.Conversations.Add(currentConversation);
                await DbContext.SaveChangesAsync();
                isNewConversation = true;
            }

            // Add user message
            var userMessage = new Message
            {
                ConversationId = currentConversation.Id,
                Role = "user",
                Body = messageText,
                Status = "complete",
                CreatedAt = DateTime.UtcNow
            };

            DbContext.Messages.Add(userMessage);
            await DbContext.SaveChangesAsync();
            StateHasChanged();

            // Navigate to the conversation URL if it's a new conversation
            if (isNewConversation)
            {
                Navigation.NavigateTo($"/chat/{currentConversation.Id}");
            }

            // Reload conversation with messages to get the navigation properties
            await LoadConversation(currentConversation.Id);

            // Generate agent response
            await GenerateAgentResponse();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error sending message: {ex.Message}";
            StateHasChanged();
        }
        finally
        {
            isProcessing = false;
            StateHasChanged();
            await FocusInput();
        }
    }

    private async Task GenerateAgentResponse()
    {
        if (currentConversation == null || rootAgent == null) return;

        try
        {
            // Create cancellation token for this generation
            currentGenerationCancellation = new CancellationTokenSource();
            var cancellationToken = currentGenerationCancellation.Token;

            // Create and immediately save the generating message to get a real database ID
            var agentMessage = new Message
            {
                ConversationId = currentConversation.Id,
                Role = "assistant",
                AgentName = "Assistant",
                Body = "", // Start empty for "thinking" state
                Status = "generating", // Mark as generating
                CreatedAt = DateTime.UtcNow
            };

            DbContext.Messages.Add(agentMessage);
            await DbContext.SaveChangesAsync(); // This assigns the real database ID

            var messageId = agentMessage.Id; // We now have the real ID

            // Reload conversation to show the new generating message
            await LoadConversation(currentConversation.Id);

            // Get the fresh message using the ID we just saved
            var freshMessage = currentConversation.Messages.First(m => m.Id == messageId);

            // Prepare message history for the agent (only root messages)
            var messageHistory = GetMessageHistoryForAgent();

            // Create tools for this conversation
            var tools = new IToolInterface[]
            {
                ServiceProvider.GetRequiredService<DiceRollTool>(),
                ServiceProvider.GetRequiredService<AssistantTool>()
                    .Configure(
                        functionName: "organizer",
                        toolDescription: "Organize the information into a table, tree or graph",
                        modelName: "qwen3:4b",
                        systemMessage: @"You are an assistant who structures the information you receive in a clear, systematic form. Add notes if there appear to be inconsistencies or errors.",
                        compressResponseMessage: "Double check your result and generate it again please.",
                        contextLength: 8192,
                        thinking: true),

                ServiceProvider.GetRequiredService<AssistantTool>()
                    .Configure(
                        functionName: "remove_irrelevant",
                        toolDescription: "Removes definitely irrelevant information from the question",
                        modelName: "qwen3:4b",
                        systemMessage: @"You receive a prompt from the user and you remove all the information that is definitely not relevant",
                        compressResponseMessage: "Generate a shorter version of the information.",
                        contextLength: 8192,
                        thinking: true),

                ServiceProvider.GetRequiredService<AssistantTool>()
                    .Configure(
                        functionName: "reducer",
                        toolDescription: "Solves one part of the problem, and returns a new simpler version of the problem along with the partial solution.",
                        modelName: "qwen3:4b",
                        systemMessage: @"Solve one part of the problem, and return a new simpler version of the problem along with the partial solution.",
                        compressResponseMessage: "Double check your result and generate it again please.",
                        contextLength: 8192,
                        thinking: true),

                ServiceProvider.GetRequiredService<AssistantTool>()
                    .Configure(
                        functionName: "six_thinking_hats",
                        toolDescription: "Apply Edward de Bono's Six Thinking Hats method for comprehensive analysis",
                        modelName: "qwen3:4b",
                        systemMessage: "You are an expert in Edward de Bono's Six Thinking Hats method. Analyze the problem from six distinct perspectives: White Hat (facts and information), Red Hat (emotions and feelings), Black Hat (critical judgment and caution), Yellow Hat (positive assessment), Green Hat (creativity and alternatives), Blue Hat (process control and meta-thinking). Present insights from each hat systematically.",
                        compressResponseMessage: "Provide a synthesis of the key insights from all six thinking perspectives.",
                        contextLength: 8192,
                        thinking: true),

                ServiceProvider.GetRequiredService<AssistantTool>()
                    .Configure(
                        functionName: "root_cause_analyst",
                        toolDescription: "Systematic root cause analysis using the 5 Whys and fishbone diagram approach",
                        modelName: "qwen3:4b",
                        systemMessage: "You are a root cause analysis expert. For any problem, apply the '5 Whys' technique by asking 'why' at least five times to drill down to fundamental causes. Also consider the fishbone diagram categories: People, Process, Equipment, Materials, Environment, and Management. Identify multiple potential root causes and prioritize them by likelihood and impact.",
                        compressResponseMessage: "List the top 2-3 most likely root causes identified.",
                        contextLength: 8192,
                        thinking: true),

                ServiceProvider.GetRequiredService<AssistantTool>()
                    .Configure(
                        functionName: "math_assistant",
                        toolDescription: "Rigorous mathematical problem solving with step-by-step verification",
                        modelName: "qwen3:4b",
                        systemMessage: "You are a meticulous mathematical assistant. For every problem, work step-by-step with clear logic and no skipped reasoning. Break down equations, explain each transformation, and explicitly state assumptions or simplifications. When solving word problems, first extract and define all relevant quantities and variables before proceeding with calculations. Always verify your final answer by substitution or alternative methods when possible.",
                        compressResponseMessage: "Please provide the final answer with key formula or method used.",
                        contextLength: 8192,
                        thinking: true),

                ServiceProvider.GetRequiredService<AssistantTool>()
                    .Configure(
                        functionName: "logic_checker",
                        toolDescription: "Formal logic analysis and fallacy detection",
                        modelName: "qwen3:4b",
                        systemMessage: "You are a logic and critical thinking expert. Analyze arguments for logical structure, validity, and soundness. Identify logical fallacies (ad hominem, straw man, false dichotomy, etc.), check for consistency, and evaluate the strength of evidence. Use formal logic notation when helpful. Always distinguish between valid reasoning and truth of premises.",
                        compressResponseMessage: "Summarize the logical validity and any major fallacies identified.",
                        contextLength: 8192,
                        thinking: true),

                ServiceProvider.GetRequiredService<AssistantTool>()
                    .Configure(
                        functionName: "decision_matrix",
                        toolDescription: "Systematic decision analysis using weighted criteria and scoring",
                        modelName: "qwen3:4b",
                        systemMessage: "You are a decision analysis expert. For any choice or decision, help structure the problem by: 1) Clearly defining the decision to be made, 2) Identifying all viable options, 3) Determining relevant criteria for evaluation, 4) Weighting criteria by importance, 5) Scoring each option against each criterion, 6) Calculating weighted scores and ranking options. Always consider both quantitative and qualitative factors, and acknowledge uncertainty.",
                        compressResponseMessage: "Provide the top-ranked option with key supporting criteria.",
                        contextLength: 8192,
                        thinking: true),

                ServiceProvider.GetRequiredService<AssistantTool>()
                    .Configure(
                        functionName: "devil_advocate",
                        toolDescription: "Systematic counter-argument and weakness identification",
                        modelName: "qwen3:4b",
                        systemMessage: "You are a devil's advocate expert. For any position, argument, or proposal, systematically challenge it by: identifying unstated assumptions, finding potential counter-evidence, considering alternative explanations, examining edge cases and failure modes, questioning the logic and evidence chain, and presenting the strongest possible opposing viewpoint. Be intellectually honest and fair while being thoroughly critical. Help strengthen arguments by revealing their weakest points.",
                        compressResponseMessage: "Present the strongest counter-argument and key vulnerabilities identified.",
                        contextLength: 8192,
                        thinking: true),

            };

            Func<string, Task<Message>> createToolMessageCallback = async (toolName) =>
            {
                var toolMessage = new Message
                {
                    ConversationId = currentConversation.Id,
                    Role = "tool",
                    AgentName = toolName,
                    Body = "",
                    Status = "generating",
                    CreatedAt = DateTime.UtcNow
                };

                DbContext.Messages.Add(toolMessage);
                await DbContext.SaveChangesAsync();

                // Reload conversation to include the new message
                await LoadConversation(currentConversation.Id);

                return currentConversation.Messages.First(m => m.Id == toolMessage.Id);
            };

            // Generate response using the real agent with tools
            await rootAgent.GenerateAsync(messageHistory, freshMessage, tools, createToolMessageCallback, cancellationToken);

            // Save the final state
            await DbContext.SaveChangesAsync();
            StateHasChanged();
        }
        catch (OperationCanceledException)
        {
            // Generation was cancelled - this is expected behavior
            Console.WriteLine("Agent response generation was cancelled");
        }
        catch (Exception ex)
        {
            errorMessage = $"Error generating response: {ex.Message}";

            // Try to find and mark the message as error if it exists
            if (currentConversation?.Messages?.Any(m => m.Status == "generating") == true)
            {
                var errorMessage = currentConversation.Messages.Last(m => m.Status == "generating");
                errorMessage.Status = "error";
                errorMessage.Body = $"Error: {ex.Message}";
                await DbContext.SaveChangesAsync();
            }

            StateHasChanged();
        }
        finally
        {
            currentGenerationCancellation = null;
        }
    }

    private List<Message> GetMessageHistoryForAgent()
    {
        if (currentConversation?.Messages == null)
            return new List<Message>();

        // Return only root messages (ParentId == null) in chronological order
        // Filter out the currently generating message
        return currentConversation.Messages
            .Where(m => m.ParentId == null && m.Status != "generating")
            .OrderBy(m => m.CreatedAt)
            .ToList();
    }

    private async Task HandleRegenerateRequest(Message message)
    {
        if (isProcessing || rootAgent == null)
            return;

        try
        {
            // Cancel any ongoing generation
            currentGenerationCancellation?.Cancel();

            // For regeneration, we need to remove all messages after the selected user message
            // and generate a new response
            var messagesToRemove = currentConversation?.Messages
                .Where(m => m.CreatedAt > message.CreatedAt)
                .ToList();

            if (messagesToRemove?.Any() == true)
            {
                DbContext.Messages.RemoveRange(messagesToRemove);
                await DbContext.SaveChangesAsync();
                await LoadConversation(currentConversation.Id);
            }

            // Generate new response
            await GenerateAgentResponse();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error regenerating response: {ex.Message}";
            StateHasChanged();
        }
    }

    private async Task HandleMessageChanged(Message message)
    {
        // Handle message changes - save to database when message properties change
        try
        {
            await DbContext.SaveChangesAsync();

            // Auto-scroll when message content changes (streaming updates)
            await ScrollToBottom();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving message changes: {ex.Message}");
        }
    }

    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !e.ShiftKey)
        {
            await JSRuntime.InvokeVoidAsync("eval", "event.preventDefault()");
            await SendMessage();
        }
    }

    private async Task HandleInput(ChangeEventArgs e)
    {
        var textarea = e.Value?.ToString() ?? string.Empty;
        currentMessage = textarea;

        // Auto-resize textarea (only if not prerendering)
        if (JSRuntime is IJSInProcessRuntime)
            await JSRuntime.InvokeVoidAsync("autoResizeTextarea", "messageInput");
    }

    private async Task FocusInput()
    {
        if (JSRuntime is IJSInProcessRuntime)
            await JSRuntime.InvokeVoidAsync("eval", "document.getElementById('messageInput')?.focus()");
    }

    private async Task ScrollToBottom()
    {
        if (JSRuntime is IJSInProcessRuntime)
        {
            try
            {
                await JSRuntime.InvokeVoidAsync("scrollMessagesToBottom");
            }
            catch
            {
                // Fallback if the JS function isn't available yet
            }
        }
    }

    private IEnumerable<Message> GetRootMessages()
    {
        if (currentConversation?.Messages == null)
            return Enumerable.Empty<Message>();

        return currentConversation.Messages
            .Where(m => m.ParentId == null)
            .OrderBy(m => m.CreatedAt);
    }

    private string GenerateConversationTitle(string firstMessage)
    {
        // Simple title generation - take first few words
        var words = firstMessage.Split(' ', StringSplitOptions.RemoveEmptyEntries);
        var title = string.Join(" ", words.Take(6));

        if (words.Length > 6)
            title += "...";

        return title.Length > 50 ? title.Substring(0, 47) + "..." : title;
    }

    public void Dispose()
    {
        currentGenerationCancellation?.Cancel();
        currentGenerationCancellation?.Dispose();
    }
}

<script>
    window.scrollMessagesToBottom = () => {
        for (const m of document.querySelectorAll('.messages-container')) {
            m.scrollTop = m.scrollHeight;
        }
    }
    if (!window.interactionHandler) {
        window.interactionHandler = function() {
            // scroll any generating message into view
            const generatingMessages = document.querySelectorAll(".generating-message");
            if (generatingMessages.length > 0) {
                for (const node of generatingMessages) {
                    const elRect = node.getBoundingClientRect();
                    const parentRect = node.parentNode.getBoundingClientRect();
                    if (elRect.bottom > parentRect.bottom) {
                        // element is below bottom
                        node.scrollIntoView({ behavior: 'auto', block: 'end'});
                    }
                }
            }

            requestAnimationFrame(window.interactionHandler);
        };
        requestAnimationFrame(window.interactionHandler);

        const fixHeight = (el) => {
            const offsetHeight = el.offsetHeight;
            el.style.height = 'auto';
            el.style.height = `${el.scrollHeight}px`;
            requestAnimationFrame(() => {
                const newOffsetHeight = el.offsetHeight;
                const diff = newOffsetHeight - offsetHeight;
                if (diff != 0) {
                    const messages = el.parentElement?.parentElement?.previousElementSibling;
                    messages.scrollTop += diff;
                }
            });
        };

        ['input', 'change', 'blur'].forEach(eventType => {
            document.body.addEventListener(eventType, (event) => {
                console.log("event", eventType, event.target.value);
                // makes textarea with css class .auto-resize accomodate the content length
                if (event.target.matches('textarea.auto-resize')) {
                    fixHeight(event.target);
                    setTimeout(()=>fixHeight(event.target));
                }
            });
        });
    }
</script>