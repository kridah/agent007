@page "/chat"
@using System.Text.Json
@using src.Data
@inject OllamaService OllamaService
@inject IJSRuntime JSRuntime

<PageTitle>Chat with LLM</PageTitle>

<h1>Chat with AI</h1>

<div class="chat-container">
    <div class="message-container">
        @foreach (var message in messages)
        {
            <div class="message @(message.IsUser ? "user-message" : "ai-message")">
                <div class="message-header">@(message.IsUser ? "You" : selectedModel)</div>
                <div class="message-content">@((MarkupString)FormatMessage(message.Content))</div>
            </div>
        }
        @if (isGenerating)
        {
            <div class="message ai-message">
                <div class="message-header">@selectedModel</div>
                <div class="message-content">Thinking...</div>
            </div>
        }
    </div>

    <div class="input-container">
        <div class="model-selector-row">
        <div class="model-selector">
            <label for="model-select">Model:</label>
                <select id="model-select" @bind="selectedModel" @bind:after="SaveChatHistoryAsync" disabled="@isGenerating">
                @foreach (var model in availableModels)
                {
                    <option value="@model">@model</option>
                }
            </select>
        </div>

            <button class="clear-button" @onclick="ClearChatHistory" disabled="@(isGenerating || messages.Count == 0)">
                Clear Chat
            </button>
        </div>
        
        <textarea 
            @bind="userInput" 
            @onkeydown="HandleKeyDown"
            placeholder="Type your message here..." 
            disabled="@isGenerating"
            rows="3"
            class="input-textarea">
        </textarea>
        
        <button @onclick="SendMessage" disabled="@(isGenerating || string.IsNullOrWhiteSpace(userInput))">
            Send
        </button>
    </div>
</div>

<style>
    .chat-container {
        display: flex;
        flex-direction: column;
        height: 80vh;
        border: 1px solid #ccc;
        border-radius: 8px;
        overflow: hidden;
    }
    
    .message-container {
        flex: 1;
        overflow-y: auto;
        padding: 20px;
    }
    
    .message {
        margin-bottom: 15px;
        padding: 10px 15px;
        border-radius: 8px;
        max-width: 80%;
    }
    
    .user-message {
        background-color: #dcf8c6;
        margin-left: auto;
    }
    
    .ai-message {
        background-color: #f1f0f0;
        margin-right: auto;
    }
    
    .message-header {
        font-weight: bold;
        margin-bottom: 5px;
    }
    
    .message-content {
        white-space: pre-wrap;
        word-break: break-word;
    }
    
    .input-container {
        display: flex;
        flex-direction: column;
        padding: 15px;
        background-color: #f8f9fa;
        border-top: 1px solid #ccc;
    }
    
    .model-selector {
        margin-bottom: 10px;
    }
    
    .model-selector-row {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 10px;
    }

    .clear-button {
        background-color: #dc3545;
        padding: 4px 8px;
        font-size: 0.9rem;
    }

    .input-textarea {
        flex: 1;
        border: 1px solid #ccc;
        border-radius: 4px;
        padding: 8px;
        margin-bottom: 10px;
        resize: none;
    }
    
    button {
        background-color: #007bff;
        color: white;
        border: none;
        border-radius: 4px;
        padding: 8px 15px;
        cursor: pointer;
    }
    
    button:disabled {
        background-color: #cccccc;
    }
</style>

@code {
    private string userInput = "";
    private List<ChatMessage> messages = new();
    private bool isGenerating = false;
    private string selectedModel = "llama3";
    private List<string> availableModels = new() { "llama3" };
    
    private const string STORAGE_KEY = "chat_history";
    private const string MODEL_KEY = "selected_model";

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var models = await OllamaService.ListModelsAsync();
            availableModels = models.Select(m => m.Name).ToList();
            
            // Load saved model preference
            var savedModel = await LoadSelectedModelAsync();
            if (!string.IsNullOrEmpty(savedModel) && availableModels.Contains(savedModel))
            {
                selectedModel = savedModel;
            }
            else if (availableModels.Count > 0 && !availableModels.Contains(selectedModel))
            {
                selectedModel = availableModels[0];
            }
            
            await base.OnInitializedAsync();
        }
        catch (Exception ex)
        {
            // Handle error (could add an error message display)
            Console.WriteLine($"Error loading models: {ex.Message}");
        }
    }
    
    private bool _isFirstRender = true;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _isFirstRender = false;
        
            // Load saved model preference
            var savedModel = await LoadSelectedModelAsync();
            if (!string.IsNullOrEmpty(savedModel) && availableModels.Contains(savedModel))
            {
                selectedModel = savedModel;
            }
        
            // Load saved chat history
            await LoadChatHistoryAsync();
        
            StateHasChanged();
        }
    
        await base.OnAfterRenderAsync(firstRender);
    }
    
    private async Task LoadChatHistoryAsync()
    {
        try
        {
            var json = await JSRuntime.InvokeAsync<string>("localStorage.getItem", STORAGE_KEY);
            if (!string.IsNullOrEmpty(json))
            {
                messages = JsonSerializer.Deserialize<List<ChatMessage>>(json) ?? new List<ChatMessage>();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading chat history: {ex.Message}");
        }
    }
    
    private async Task SaveChatHistoryAsync()
    {
        try
        {
            var json = JsonSerializer.Serialize(messages);
            await JSRuntime.InvokeVoidAsync("localStorage.setItem", STORAGE_KEY, json);
            
            // Save selected model as well
            await JSRuntime.InvokeVoidAsync("localStorage.setItem", MODEL_KEY, selectedModel);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving chat history: {ex.Message}");
        }
    }
    
    private async Task<string> LoadSelectedModelAsync()
    {
        try
        {
            return await JSRuntime.InvokeAsync<string>("localStorage.getItem", MODEL_KEY);
        }
        catch
        {
            return string.Empty;
        }
    }

    private async Task SendMessage()
    {
        if (string.IsNullOrWhiteSpace(userInput) || isGenerating)
            return;

        // Add user message
        var userMessage = new ChatMessage { Content = userInput, IsUser = true };
        messages.Add(userMessage);
        
        string currentInput = userInput;
        userInput = "";
        
        isGenerating = true;
        StateHasChanged();

        try
        {
            // Get AI response
            var response = await OllamaService.ChatAsync(currentInput, selectedModel);
            
            // Add AI message
            messages.Add(new ChatMessage { Content = response, IsUser = false });
            
            // Save the updated chat history
            await SaveChatHistoryAsync();
        }
        catch (Exception ex)
        {
            // Add error message
            messages.Add(new ChatMessage { 
                Content = $"Error: {ex.Message}", 
                IsUser = false 
            });
            
            // Save even if there was an error
            await SaveChatHistoryAsync();
        }
        finally
        {
            isGenerating = false;
            StateHasChanged();
        }
    }
    // Add a method to clear chat history
    private async Task ClearChatHistory()
    {
        messages.Clear();
        await SaveChatHistoryAsync();
        StateHasChanged();
    }

    private void HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && e.CtrlKey)
        {
            SendMessage();
        }
    }

    private string FormatMessage(string content)
    {
        // Simple conversion of newlines to <br> and preserving spaces
        return content
            .Replace("\n", "<br>")
            .Replace("  ", "&nbsp;&nbsp;");
    }

    public class ChatMessage
    {
        public string Content { get; set; } = "";
        public bool IsUser { get; set; }
    }
}