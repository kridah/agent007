@page "/multiagent"
@using src.Data
@using System.Text.Json
@inject OllamaService OllamaService
@inject IJSRuntime JSRuntime

<PageTitle>Multi-Agent Conversation</PageTitle>

<h1>Multi-Agent Conversation</h1>

<div class="chat-container">
      <div class="message-container" id="messageContainer">
        @if (conversation.Count == 0)
        {
            <div class="empty-state">
                <p>Start a new conversation between two AI agents</p>
            </div>
        }
        else
        {
            @foreach (var message in conversation)
            {
                <div class="message @GetMessageClass(message.Role)">
                    <div class="message-header">@GetDisplayRole(message.Role)</div>
                    <div class="message-content">
                        @if (message.Role == "system")
                        {
                            @((MarkupString)FormatMessage(message.Content))
                        }
                        else
                        {
                            <MarkdownView Content="@message.Content" />
                        }
                    </div>
                </div>
            }
        }
        @if (isGenerating)
        {
            <div class="message thinking-message">
                <div class="message-header">Generating...</div>
                <div class="message-content">
                    <div class="spinner"></div>
                </div>
            </div>
        }
    </div>

    <div class="input-container">
        <div class="config-panel">
            <div class="row">
                <div class="col-md-6">
                    <div class="form-group">
                        <label for="firstModel">First Agent:</label>
                        <select id="firstModel" class="form-control" @bind="firstModel" disabled="@isGenerating">
                            @foreach (var model in availableModels)
                            {
                                <option value="@model">@model</option>
                            }
                        </select>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="form-group">
                        <label for="secondModel">Second Agent:</label>
                        <select id="secondModel" class="form-control" @bind="secondModel" disabled="@isGenerating">
                            @foreach (var model in availableModels)
                            {
                                <option value="@model">@model</option>
                            }
                        </select>
                    </div>
                </div>
            </div>
            <div class="form-group">
                <label for="maxTurns">Maximum Turns:</label>
                <input id="maxTurns" type="number" class="form-control" @bind="maxTurns" min="1" max="10" disabled="@isGenerating" />
            </div>
        </div>

        <div class="prompt-section">
            <textarea 
                @bind="initialPrompt" 
                placeholder="Enter initial prompt for the conversation..." 
                disabled="@isGenerating"
                class="input-textarea">
            </textarea>
            
            <div class="button-row">
                <button class="clear-button" @onclick="ClearConversation" disabled="@(isGenerating || conversation.Count == 0)">
                    Clear Chat
                </button>
                <button class="start-button" @onclick="StartConversation" disabled="@isGenerating">
                    @if (isGenerating)
                    {
                        <span>Generating...</span>
                    }
                    else
                    {
                        <span>Start Conversation</span>
                    }
                </button>
            </div>
        </div>
    </div>
</div>

<style>
    .chat-container {
        display: flex;
        flex-direction: column;
        height: 80vh;
        border: 1px solid #ccc;
        border-radius: 8px;
        overflow: hidden;
    }
    
    .message-container {
        flex: 1;
        overflow-y: auto;
        padding: 20px;
    }
    
    .empty-state {
        display: flex;
        align-items: center;
        justify-content: center;
        height: 100%;
        color: #666;
        font-style: italic;
    }
    
    .message {
        margin-bottom: 15px;
        padding: 12px 15px;
        border-radius: 8px;
        max-width: 85%;
    }
    
    .system-message {
        background-color: #f0f0f0;
        color: #666;
        margin-left: auto;
        margin-right: auto;
        max-width: 90%;
        text-align: center;
        font-style: italic;
    }
    
    .first-agent-message {
        background-color: #e3f2fd;
        margin-left: 20px;
        border-left: 4px solid #2196f3;
    }
    
    .second-agent-message {
        background-color: #fff8e1;
        margin-right: 20px;
        margin-left: auto;
        border-left: 4px solid #ffc107;
    }
    
    .user-message {
        background-color: #dcf8c6;
        margin-left: auto;
    }
    
    .thinking-message {
        background-color: #f5f5f5;
        margin-left: auto;
        margin-right: auto;
        text-align: center;
    }

    .spinner {
        display: inline-block;
        width: 20px;
        height: 20px;
        border: 3px solid rgba(0, 0, 0, 0.1);
        border-radius: 50%;
        border-top-color: #007bff;
        animation: spin 1s ease-in-out infinite;
    }


    
    .message-header {
        font-weight: bold;
        margin-bottom: 5px;
    }
    
    .message-content {
        white-space: pre-wrap;
        word-break: break-word;
    }
    
    .input-container {
        display: flex;
        flex-direction: column;
        padding: 15px;
        background-color: #f8f9fa;
        border-top: 1px solid #ccc;
    }
    
    .config-panel {
        margin-bottom: 10px;
        padding: 10px;
        background-color: #eef1f3;
        border-radius: 5px;
    }
    
    .prompt-section {
        display: flex;
        flex-direction: column;
    }
    
    .input-textarea {
        border: 1px solid #ccc;
        border-radius: 4px;
        padding: 8px;
        margin-bottom: 10px;
        resize: none;
        min-height: 80px;
    }
    
    .button-row {
        display: flex;
        justify-content: space-between;
    }
    
    .start-button {
        background-color: #007bff;
        color: white;
        border: none;
        border-radius: 4px;
        padding: 8px 15px;
        cursor: pointer;
    }
    
    .clear-button {
        background-color: #dc3545;
        color: white;
        border: none;
        border-radius: 4px;
        padding: 8px 15px;
        cursor: pointer;
    }
    
    button:disabled {
        background-color: #cccccc;
        cursor: not-allowed;
    }
</style>

@code {
    private string initialPrompt = "Agent 1 tell Second agent to calculate pi to 10 decimals. Agent 2 Perform task from First agent";
    private string firstModel = "llama3";
    private string secondModel = "llama3";
    private int maxTurns = 3;
    private bool isGenerating = false;
    private List<string> availableModels = new();
    private List<MessageDisplay> conversation = new();
    
    private const string STORAGE_KEY_MULTI = "multiagent_conversation";

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var models = await OllamaService.ListModelsAsync();
            availableModels = models.Select(m => m.Name).ToList();
            
            if (availableModels.Count > 0 && !availableModels.Contains(firstModel))
            {
                firstModel = availableModels[0];
                secondModel = availableModels[0];
            }
            
            await LoadConversationAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading models: {ex.Message}");
        }
    }
    
    private async Task LoadConversationAsync()
    {
        try
        {
            var json = await JSRuntime.InvokeAsync<string>("localStorage.getItem", STORAGE_KEY_MULTI);
            if (!string.IsNullOrEmpty(json))
            {
                conversation = JsonSerializer.Deserialize<List<MessageDisplay>>(json) ?? new List<MessageDisplay>();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading conversation: {ex.Message}");
        }
    }
    
    private async Task SaveConversationAsync()
    {
        try
        {
            var json = JsonSerializer.Serialize(conversation);
            await JSRuntime.InvokeVoidAsync("localStorage.setItem", STORAGE_KEY_MULTI, json);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving conversation: {ex.Message}");
        }
    }
    
    private async Task ClearConversation()
    {
        conversation.Clear();
        await SaveConversationAsync();
        StateHasChanged();
    }

    private async Task StartConversation()
    {
    if (string.IsNullOrWhiteSpace(initialPrompt) || isGenerating)
        return;

    try
    {
        isGenerating = true;
        conversation.Clear();
        StateHasChanged();
        
        // Add system prompt (for display purposes)
        conversation.Add(new MessageDisplay 
        { 
            Role = "system", 
            Content = initialPrompt 
        });
        
        await SaveConversationAsync();
        // await ScrollToBottomAsync();
        StateHasChanged();
        
        // Alternate between models for the specified number of turns
        for (int i = 0; i < maxTurns; i++)
        {
            // First agent starts with system prompt in first turn, then responds to second agent
            string promptForFirstAgent = i == 0 
                ? initialPrompt 
                : conversation.Last(m => m.Role == "second_agent").Content;
            
            // First agent turn
            var firstAgentResponse = await OllamaService.GenerateAgentResponseAsync(
                promptForFirstAgent,
                conversation,
                firstModel,
                $"You are Agent 1 using the {firstModel} model. In the first turn, follow the system instructions. In later turns, respond to Agent 2's messages."
            );
            
            conversation.Add(new MessageDisplay 
            { 
                Role = "first_agent", 
                Content = firstAgentResponse,
                ModelName = firstModel
            });
            
            await SaveConversationAsync();
            // await ScrollToBottomAsync();
            StateHasChanged();
            
            // Second agent responds to first agent
            var secondAgentResponse = await OllamaService.GenerateAgentResponseAsync(
                firstAgentResponse,
                conversation,
                secondModel,
                $"You are Agent 2 using the {secondModel} model. Respond to Agent 1's message and follow any instructions given."
            );
            
            conversation.Add(new MessageDisplay 
            { 
                Role = "second_agent", 
                Content = secondAgentResponse,
                ModelName = secondModel
            });
            
            await SaveConversationAsync();
            // await ScrollToBottomAsync();
            StateHasChanged();
        }
    }
    catch (Exception ex)
    {
        conversation.Add(new MessageDisplay { 
            Role = "system", 
            Content = $"Error generating conversation: {ex.Message}" 
        });
    }
    finally
    {
        isGenerating = false;
        await SaveConversationAsync();
        StateHasChanged();
    }
}
    
    private async Task ScrollToBottomAsync()
    {
        await JSRuntime.InvokeVoidAsync("scrollToBottom", "messageContainer");
    }
    
    private string GetMessageClass(string role)
    {
        return role switch
        {
            "first_agent" => "first-agent-message",
            "second_agent" => "second-agent-message",
            "system" => "system-message",
            _ => "system-message"
        };
    }
    
    private string GetDisplayRole(string role)
    {
        return role switch
        {
            "first_agent" => $"Agent 1 ({firstModel})",
            "second_agent" => $"Agent 2 ({secondModel})",
            "system" => "System",
            _ => role
        };
    }

    private string FormatMessage(string content)
    {
        // Simple conversion of newlines to <br> and preserving spaces
        return content
            .Replace("\n", "<br>")
            .Replace("  ", "&nbsp;&nbsp;");
    }

    public class MessageDisplay
    {
        public string Role { get; set; } = "";
        public string Content { get; set; } = "";
        public string ModelName { get; set; } = "";
    }
}