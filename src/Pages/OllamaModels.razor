@page "/ollamamodels"
@using Microsoft.Extensions.Logging
@using src.Data
@inject OllamaService OService
@using OllamaSharp.Models

<PageTitle>Ollama Models</PageTitle>

<h2>Installed Models</h2>
@if (models == null)
{
    <p><em>Loading installed models...</em></p>
}
else
{
    <div class="table-responsive">
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>Model</th>
                    <th>Format</th>
                    <th>Family</th>
                    <th>Model Size</th>
                    <th>Parameter Size</th>
                    <th>Quantization</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var model in models)
                {
                    <tr>
                        <td>@model.Name</td>
                        <td>@model.Details.Format</td>
                        <td>@(model.Details.Family ?? "Unknown")</td>
                        <td>@($"{model.Size / 1000000f:F2} MB")</td>
                        <td>@(model.Details.ParameterSize)</td>
                        <td>@(model.Details.QuantizationLevel)</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

<hr />

<h2>Available Models for Download</h2>
@if (availableModels == null)
{
    <p><em>Loading available models...</em></p>

}
else
{
    <div class="row">
        @foreach (var model in availableModels)
        {
            <div class="col-md-6 col-lg-4 mb-4">
                <div class="card h-100">
                    <div class="card-header">
                        <h5 class="mb-0">@model.DisplayName</h5>
                    </div>
                    <div class="card-body">
                        <p>@model.Description</p>
                        <p><strong>Size:</strong> @model.Size</p>
                        <p><strong>Model ID:</strong> @model.Name</p>
                    </div>
                    <div class="card-footer">
                        @if (model.IsInstalled)
                        {
                            <button class="btn btn-success w-100" disabled>
                                <i class="oi oi-check"></i> Installed
                            </button>
                        }
                        else if (downloadProgressMap.ContainsKey(model.Name))
                        {
                            <div class="text-center">
                                <div class="progress mb-3">
                                    <div class="progress-bar progress-bar-striped progress-bar-animated" 
                                         role="progressbar" 
                                         style="width: @(downloadProgressMap.TryGetValue(model.Name, out var prog) ? prog : 0)%;" 
                                         aria-valuenow="@(downloadProgressMap.TryGetValue(model.Name, out var prog2) ? prog2 : 0)" 
                                         aria-valuemin="0" 
                                         aria-valuemax="100">
                                        @(downloadProgressMap.TryGetValue(model.Name, out var prog3) ? prog3 : 0)%
                                    </div>
                                </div>
                                <button class="btn btn-warning w-100" @onclick="() => AbortDownload(model.Name)">
                                    <i class="oi oi-clock"></i> Cancel Download
                                </button>
                            </div>
                        }
                        else
                        {
                            <button class="btn btn-primary w-100" @onclick="() => DownloadModel(model.Name)">
                                <i class="oi oi-cloud-download"></i> Download
                            </button>
                        }
                    </div>
                </div>
            </div>
        }
    </div>
}

@if (!string.IsNullOrEmpty(statusMessage))
{
    <div class="alert @statusAlertClass alert-dismissible fade show mt-3" role="alert">
        @statusMessage
        <button type="button" class="btn-close" @onclick="ClearStatusMessage"></button>
    </div>
}

@code {







    private IEnumerable<Model> models;
    private List<AvailableModel> availableModels;
    private Dictionary<string, CancellationTokenSource> downloadCTS = new();
    private Dictionary<string, int> downloadProgressMap = new();
    private string statusMessage = "";
    private string statusAlertClass = "alert-info";
    [Inject]
    private ILogger<OllamaModels> logger { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        try
        {
            models = await OService.ListModelsAsync();
            availableModels = await OService.GetAvailableModelsAsync();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            statusMessage = $"Error loading models: {ex.Message}";
            statusAlertClass = "alert-danger";
        }
    }

    private async Task DownloadModel(string modelName)
    {
        var downloadCts = new CancellationTokenSource();
        downloadCTS[modelName] = downloadCts;
        downloadCts.Token.Register(() => {
            statusMessage = $"Download cancelled for {modelName}.";
            statusAlertClass = "alert-warning";
            downloadCTS.Remove(modelName);
            downloadProgressMap.Remove(modelName);
            InvokeAsync(StateHasChanged);
        });

        _ = Task.Run(async () =>
        {
            var result = await OService.DownloadModelAsync(modelName, progress =>
            {
                if (!downloadCTS.ContainsKey(modelName) || downloadCTS[modelName].IsCancellationRequested)
                    return; // Don't update progress if cancelled

                downloadProgressMap[modelName] = progress.PercentComplete;
                InvokeAsync(StateHasChanged);
            }, downloadCts.Token);

            await LoadData();
        });
    }

    private void AbortDownload(string modelName)
    {
        if (downloadCTS.TryGetValue(modelName, out var downloadCts))
        {
            logger.LogInformation($"Cancelling download for model: {modelName}");
            downloadCts.Cancel();
        }
    }

    private void ClearStatusMessage()
    {
        statusMessage = "";
    }
}