@page "/models/ollama"
@using Agent007.Models
@using Agent007.Data
@using System.Globalization
@inject IModelRepository ModelRepository
@inject IJSRuntime JSRuntime

<PageTitle>Ollama Models</PageTitle>

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <h1 class="mb-4">Ollama Models</h1>

            <div class="d-flex justify-content-between align-items-center mb-4">
                <div class="input-group" style="max-width: 400px;">
                    <input type="text" class="form-control" placeholder="Enter model name (e.g., llama2, mistral)" @bind="newModelName" @onkeypress="HandleKeyPress">
                    <button class="btn btn-success" @onclick="DownloadModel" disabled="@(string.IsNullOrWhiteSpace(newModelName) || isDownloading)">
                        <i class="fas fa-download"></i> Download
                    </button>
                </div>
            </div>

            @if (models == null)
            {
                <div class="text-center">
                    <div class="spinner-border" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                    <p class="mt-2">Loading models...</p>
                </div>
            }
            else if (!models.Any())
            {
                <div class="alert alert-info">
                    <i class="fas fa-info-circle"></i> No models found. Try downloading a model using the input above.
                </div>
            }
            else
            {
                <div class="row">
                    @foreach (var model in models.OrderBy(m => m.Name))
                    {
                        <div class="col-12 col-md-6 col-lg-4 mb-4">
                            <div class="card h-100 @GetCardClass(model.Status)">
                                <div class="card-header d-flex justify-content-between align-items-center">
                                    <h5 class="card-title mb-0">
                                        @switch (model.Status)
                                        {
                                            case OllamaModel.Statuses.Installed:
                                                <i class="fas fa-check-circle text-success"></i>
                                                break;
                                            case OllamaModel.Statuses.Downloading:
                                                <i class="fas fa-download text-warning"></i>
                                                break;
                                            case OllamaModel.Statuses.NotInstalled:
                                                <i class="fas fa-circle text-secondary"></i>
                                                break;
                                        }
                                        @model.DisplayName
                                    </h5>
                                    @if (model.Status == OllamaModel.Statuses.Installed)
                                    {
                                        <button class="btn btn-sm btn-outline-danger" @onclick="() => DeleteModel(model.Name)">
                                            <i class="fas fa-trash"></i>
                                        </button>
                                    }
                                    else if (model.Status == OllamaModel.Statuses.Downloading)
                                    {
                                        <button class="btn btn-sm btn-outline-warning" @onclick="() => CancelDownload(model.Name)">
                                            <i class="fas fa-times"></i> Cancel
                                        </button>
                                    }
                                </div>

                                <div class="card-body">
                                    <p class="card-text text-muted small">@model.Description</p>

                                    @if (!string.IsNullOrEmpty(model.Size) && model.Size != "Unknown")
                                    {
                                        <p class="card-text">
                                            <small class="text-muted">
                                                <i class="fas fa-hdd"></i> Size: @model.Size
                                            </small>
                                        </p>
                                    }

                                    @if (model.Status == OllamaModel.Statuses.Downloading)
                                    {
                                        <div class="mb-2">
                                            <div class="progress">
                                                <div class="progress-bar bg-warning progress-bar-striped progress-bar-animated"
                                                     role="progressbar"
                                                     style="width: @(model.DownloadProgress.ToString("F1", CultureInfo.InvariantCulture))%"
                                                     aria-valuenow="@model.DownloadProgress"
                                                     aria-valuemin="0"
                                                     aria-valuemax="100">
                                                    @($"{model.DownloadProgress:F1}%")
                                                </div>
                                            </div>
                                        </div>
                                        <p class="card-text">
                                            <small class="text-warning">
                                                <i class="fas fa-download"></i> Downloading... @($"{model.DownloadProgress:F1}%")
                                            </small>
                                        </p>
                                    }
                                </div>

                                <div class="card-footer">
                                    @switch (model.Status)
                                    {
                                        case OllamaModel.Statuses.Installed:
                                            <span class="badge bg-success">
                                                <i class="fas fa-check"></i> Installed
                                            </span>
                                            break;
                                        case OllamaModel.Statuses.Downloading:
                                            <span class="badge bg-warning">
                                                <i class="fas fa-download"></i> Downloading
                                            </span>
                                            break;
                                        case OllamaModel.Statuses.NotInstalled:
                                            <span class="badge bg-secondary">
                                                <i class="fas fa-cloud"></i> Not Installed
                                            </span>
                                            break;
                                    }
                                </div>
                            </div>
                        </div>
                    }
                </div>
            }
        </div>
    </div>
</div>

@code {
    private IEnumerable<OllamaModel>? models;
    private string newModelName = string.Empty;
    private bool isDownloading = false;

    protected override async Task OnInitializedAsync()
    {
        // Subscribe to events
        ModelRepository.ModelsChanged += OnModelsChanged;
        ModelRepository.ModelProgressChanged += OnModelProgressChanged;

        await LoadModels();
    }

    private async Task LoadModels()
    {
        try
        {
            models = await ModelRepository.GetAvailableModelsAsync();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error loading models: {ex.Message}");
        }
    }

    private async Task RefreshModels()
    {
        try
        {
            await ModelRepository.RefreshModelsAsync();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error refreshing models: {ex.Message}");
        }
    }

    private async Task DownloadModel()
    {
        if (string.IsNullOrWhiteSpace(newModelName))
            return;

        try
        {
            isDownloading = true;
            var progress = new Progress<float>();
            await ModelRepository.StartDownloadAsync(newModelName.Trim(), progress);
            newModelName = string.Empty;
        }
        catch (OperationCanceledException)
        {
            // Download was cancelled, no need to show error
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error downloading model: {ex.Message}");
        }
        finally
        {
            isDownloading = false;
            StateHasChanged();
        }
    }

    private async Task DeleteModel(string modelName)
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to delete the model '{modelName}'?");
        if (!confirmed)
            return;

        try
        {
            await ModelRepository.DeleteModelAsync(modelName);
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error deleting model: {ex.Message}");
        }
    }

    private void CancelDownload(string modelName)
    {
        try
        {
            ModelRepository.CancelDownload(modelName);
        }
        catch (Exception ex)
        {
            JSRuntime.InvokeVoidAsync("alert", $"Error cancelling download: {ex.Message}");
        }
    }

    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await DownloadModel();
        }
    }

    private void OnModelsChanged(object? sender, ModelsChangedEventArgs e)
    {
        InvokeAsync(async () =>
        {
            await LoadModels();
        });
    }

    private void OnModelProgressChanged(object? sender, ModelProgressEventArgs e)
    {
        InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }

    private string GetCardClass(OllamaModel.Statuses status)
    {
        return status switch
        {
            OllamaModel.Statuses.Installed => "border-success",
            OllamaModel.Statuses.Downloading => "border-warning",
            OllamaModel.Statuses.NotInstalled => "border-secondary",
            _ => "border-secondary"
        };
    }

    public void Dispose()
    {
        ModelRepository.ModelsChanged -= OnModelsChanged;
        ModelRepository.ModelProgressChanged -= OnModelProgressChanged;
    }
}